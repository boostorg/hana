name: GitHub Actions CI

on:
  pull_request:
  push:
    branches:
      - master
      - develop
      - githubactions*
      - feature/**
      - fix/**
      - pr/**

env:
    secure: gB1wvjk565j3O4UBGjyN44Vd8IGqcNHzkbvRdFNHp7C+C+JG2vhAeLlpiK0Zd483gdTjq9gPjIDwpwyG2UJ+yjT1kMTJvD1YNWpGcK6vOHYl1yMOwv/LBdnKn+J7i/FnoeULGRCCI2Fpp1qILhxeZgLxTxsdQaYXlAkkR0i8cgQ=

jobs:
  posix:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "UNIT_TESTS=true COMPILER=clang++-3.9 BOOST_VE Job 0"
            buildtype: "boost"
            packages: "clang-3.9 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:14.04"
            cxx: "clang++-3.9"
            sources: ""
            llvm_os: "trusty"
            llvm_ver: "3.9"
            unit_tests: "true"
            compiler: "clang++-3.9"
            boost_version: "default"
            enable_memcheck: "true"
            job_uuid: "b6589fc6ab"
          - name: "UNIT_TESTS=true COMPILER=clang++-4.0 BOOST_VE Job 1"
            buildtype: "boost"
            packages: "clang-4.0 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:14.04"
            cxx: "clang++-4.0"
            sources: ""
            llvm_os: "trusty"
            llvm_ver: "4.0"
            unit_tests: "true"
            compiler: "clang++-4.0"
            boost_version: "default"
            enable_memcheck: "true"
            job_uuid: "356a192b79"
          - name: "UNIT_TESTS=true COMPILER=clang++-5.0 BOOST_VE Job 2"
            buildtype: "boost"
            packages: "clang-5.0 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:14.04"
            cxx: "clang++-5.0"
            sources: ""
            llvm_os: "trusty"
            llvm_ver: "5.0"
            unit_tests: "true"
            compiler: "clang++-5.0"
            boost_version: "default"
            enable_memcheck: "true"
            job_uuid: "da4b9237ba"
          - name: "UNIT_TESTS=true COMPILER=clang++-6.0 BOOST_VE Job 3"
            buildtype: "boost"
            packages: "clang-6.0 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:14.04"
            cxx: "clang++-6.0"
            sources: ""
            llvm_os: "trusty"
            llvm_ver: "6.0"
            unit_tests: "true"
            compiler: "clang++-6.0"
            boost_version: "default"
            enable_memcheck: "true"
            job_uuid: "77de68daec"
          - name: "UNIT_TESTS=true COMPILER=clang++-7 BOOST_VERS Job 4"
            buildtype: "boost"
            packages: "clang-7 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:16.04"
            cxx: "clang++-7"
            sources: ""
            llvm_os: "xenial"
            llvm_ver: "7"
            unit_tests: "true"
            compiler: "clang++-7"
            boost_version: "default"
            enable_memcheck: "true"
            job_uuid: "1b64538924"
          - name: "UNIT_TESTS=true COMPILER=g++-6 BOOST_VERSION= Job 5"
            buildtype: "boost"
            packages: "g++-6 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:14.04"
            cxx: "g++-6"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            unit_tests: "true"
            compiler: "g++-6"
            boost_version: "default"
            enable_memcheck: "true"
            job_uuid: "ac3478d69a"
          - name: "UNIT_TESTS=true COMPILER=g++-7 BOOST_VERSION= Job 6"
            buildtype: "boost"
            packages: "g++-7 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:16.04"
            cxx: "g++-7"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            unit_tests: "true"
            compiler: "g++-7"
            boost_version: "default"
            enable_memcheck: "true"
            job_uuid: "c1dfd96eea"
          - name: "UNIT_TESTS=true COMPILER=g++-8 BOOST_VERSION= Job 7"
            buildtype: "boost"
            packages: "g++-8 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:16.04"
            cxx: "g++-8"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            unit_tests: "true"
            compiler: "g++-8"
            boost_version: "default"
            enable_memcheck: "true"
            job_uuid: "902ba3cda1"
          - name: "UNIT_TESTS=true COMPILER=default BOOST_VERSIO Job 9"
            buildtype: "boost"
            packages: "clang-7 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:16.04"
            cxx: "default"
            sources: ""
            llvm_os: "xenial"
            llvm_ver: "7"
            cmake_options: "-DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON"
            unit_tests: "true"
            compiler: "default"
            boost_version: "default"
            job_uuid: "0ade7c2cf9"
          - name: "UNIT_TESTS=true COMPILER=g++-6     BOOST_VERS Job 10"
            buildtype: "boost"
            packages: "g++-6 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:14.04"
            cxx: "g++-6"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            cmake_options: "-DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON"
            unit_tests: "true"
            compiler: "g++-6"
            boost_version: "default"
            job_uuid: "b1d5781111"
          - name: "UNIT_TESTS=true COMPILER=default BOOST_VERSIO Job 11"
            buildtype: "boost"
            packages: "clang-7 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:16.04"
            cxx: "default"
            sources: ""
            llvm_os: "xenial"
            llvm_ver: "7"
            cmake_options: "-DBOOST_HANA_ENABLE_CONCEPT_CHECKS=OFF"
            unit_tests: "true"
            compiler: "default"
            boost_version: "default"
            job_uuid: "17ba079149"
          - name: "UNIT_TESTS=true COMPILER=default BOOST_VERSIO Job 12"
            buildtype: "boost"
            packages: "clang-7 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:16.04"
            cxx: "default"
            sources: ""
            llvm_os: "xenial"
            llvm_ver: "7"
            cmake_options: "-DBOOST_HANA_ENABLE_DEBUG_MODE=ON"
            unit_tests: "true"
            compiler: "default"
            boost_version: "default"
            job_uuid: "7b52009b64"
          - name: "UNIT_TESTS=true COMPILER=default BOOST_VERSIO Job 13"
            buildtype: "boost"
            packages: "clang-7 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:16.04"
            cxx: "default"
            sources: ""
            llvm_os: "xenial"
            llvm_ver: "7"
            cmake_options: "-DBOOST_HANA_ENABLE_EXCEPTIONS=OFF"
            unit_tests: "true"
            compiler: "default"
            boost_version: "default"
            job_uuid: "bd307a3ec3"
          - name: "UNIT_TESTS=true COMPILER=default BOOST_VERSIO Job 15"
            buildtype: "boost"
            packages: "clang-7 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:16.04"
            cxx: "default"
            sources: ""
            llvm_os: "xenial"
            llvm_ver: "7"
            unit_tests: "true"
            compiler: "default"
            boost_version: "1.64.0"
            job_uuid: "f1abd67035"
          - name: "UNIT_TESTS=true COMPILER=default BOOST_VERSIO Job 16"
            buildtype: "boost"
            packages: "clang-7 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:16.04"
            cxx: "default"
            sources: ""
            llvm_os: "xenial"
            llvm_ver: "7"
            unit_tests: "true"
            compiler: "default"
            boost_version: "1.65.1"
            job_uuid: "1574bddb75"
          - name: "UNIT_TESTS=true COMPILER=default Job 17"
            buildtype: "boost"
            packages: "clang-7 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:16.04"
            cxx: "default"
            sources: ""
            llvm_os: "xenial"
            llvm_ver: "7"
            unit_tests: "true"
            compiler: "default"
            job_uuid: "0716d9708d"
          - name: "BOOST_BUILD=true COMPILER=default BOOST_VERSI Job 18"
            buildtype: "boost"
            packages: "clang-7 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:16.04"
            cxx: "default"
            sources: ""
            llvm_os: "xenial"
            llvm_ver: "7"
            boost_build: "true"
            compiler: "default"
            boost_version: "default"
            job_uuid: "9e6a55b6b4"
          - name: "BENCHMARKS=true COMPILER=default BOOST_VERSIO Job 21"
            buildtype: "boost"
            packages: "clang-7 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:16.04"
            cxx: "default"
            sources: ""
            llvm_os: "xenial"
            llvm_ver: "7"
            cmake_options: "-DCMAKE_BUILD_TYPE=Release"
            benchmarks: "true"
            compiler: "default"
            boost_version: "default"
            job_uuid: "472b07b9fc"
          - name: "UNIT_TESTS=true COMPILER=default BOOST_VERSIO Job 22"
            buildtype: "boost"
            packages: "clang-7 valgrind"
            packages_to_remove: ""
            os: "ubuntu-20.04"
            container: "ubuntu:16.04"
            cxx: "default"
            sources: ""
            llvm_os: "xenial"
            llvm_ver: "7"
            unit_tests: "true"
            compiler: "default"
            boost_version: "trunk"
            job_uuid: "12c6fc06c9"

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    steps:
      - name: Check if running in container
        if: matrix.container != ''
        run: echo "GHA_CONTAINER=${{ matrix.container }}" >> $GITHUB_ENV
      - name: If running in container, upgrade packages
        if: matrix.container != ''
        run: |
            apt-get -o Acquire::Retries=3 update && DEBIAN_FRONTEND=noninteractive apt-get -y install tzdata && apt-get -o Acquire::Retries=3 install -y sudo software-properties-common wget curl apt-transport-https make apt-file sudo unzip libssl-dev build-essential autotools-dev autoconf automake g++ libc++-helpers python ruby cpio gcc-multilib g++-multilib pkgconf python3 ccache libpython-dev
            sudo apt-add-repository ppa:git-core/ppa
            sudo apt-get -o Acquire::Retries=3 update && apt-get -o Acquire::Retries=3 -y install git
            python_version=$(python3 -c 'import sys; print("{0.major}.{0.minor}".format(sys.version_info))')
            sudo wget https://bootstrap.pypa.io/pip/$python_version/get-pip.py
            sudo python3 get-pip.py
            sudo /usr/local/bin/pip install cmake

      - uses: actions/checkout@v2

      - name: linux
        shell: bash
        env:
          CXX: ${{ matrix.cxx }}
          SOURCES: ${{ matrix.sources }}
          LLVM_OS: ${{ matrix.llvm_os }}
          LLVM_VER: ${{ matrix.llvm_ver }}
          PACKAGES: ${{ matrix.packages }}
          PACKAGES_TO_REMOVE: ${{ matrix.packages_to_remove }}
          JOB_BUILDTYPE: ${{ matrix.buildtype }}
          UNIT_TESTS: ${{ matrix.unit_tests }}
          COMPILER: ${{ matrix.compiler }}
          BOOST_VERSION: ${{ matrix.boost_version }}
          ENABLE_MEMCHECK: ${{ matrix.enable_memcheck }}
          CMAKE_OPTIONS: ${{ matrix.cmake_options }}
          BOOST_BUILD: ${{ matrix.boost_build }}
          DOCUMENTATION: ${{ matrix.documentation }}
          BENCHMARKS: ${{ matrix.benchmarks }}
          TRAVIS_BRANCH: ${{ github.base_ref }}
          TRAVIS_OS_NAME: "linux"
          JOB_UUID: ${{ matrix.job_uuid }}
        run: |
          echo '==================================> SETUP'
          echo '==================================> PACKAGES'
          set -e
          if [ -n "$PACKAGES_TO_REMOVE" ]; then sudo apt-get purge -y $PACKAGES_TO_REMOVE; fi
          echo ">>>>> APT: REPO.."
          for i in {1..3}; do sudo -E apt-add-repository -y "ppa:ubuntu-toolchain-r/test" && break || sleep 2; done
          
          if test -n "${LLVM_OS}" ; then
              wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
              if test -n "${LLVM_VER}" ; then
                  sudo -E apt-add-repository "deb http://apt.llvm.org/${LLVM_OS}/ llvm-toolchain-${LLVM_OS}-${LLVM_VER} main"
              else
                  # Snapshot (i.e. trunk) build of clang
                  sudo -E apt-add-repository "deb http://apt.llvm.org/${LLVM_OS}/ llvm-toolchain-${LLVM_OS} main"
              fi
          fi
          echo ">>>>> APT: UPDATE.."
          sudo -E apt-get -o Acquire::Retries=3 update
          if test -n "${SOURCES}" ; then
              echo ">>>>> APT: INSTALL SOURCES.."
              for SOURCE in $SOURCES; do
                  sudo -E apt-add-repository ppa:$SOURCE
              done
          fi
          echo ">>>>> APT: INSTALL ${PACKAGES}.."
          sudo -E DEBIAN_FRONTEND=noninteractive apt-get -o Acquire::Retries=3 -y --no-install-suggests --no-install-recommends install ${PACKAGES}

          echo '==================================> INSTALL AND COMPILE'
          set -e
          export TRAVIS_BUILD_DIR=$(pwd)
          export TRAVIS_BRANCH=${TRAVIS_BRANCH:-$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')}
          export VCS_COMMIT_ID=$GITHUB_SHA
          export GIT_COMMIT=$GITHUB_SHA
          export REPO_NAME=$(basename $GITHUB_REPOSITORY)
          export USER=$(whoami)
          export CC=${CC:-gcc}
          export PATH=~/.local/bin:/usr/local/bin:$PATH
          export GITHUB_EVENT_NUMBER=${{ github.event.number }}
          export TRAVIS_PULL_REQUEST=${GITHUB_EVENT_NUMBER:-false}


          if [ "$JOB_BUILDTYPE" == "boost" ]; then

          echo '==================================> INSTALL'


          # adding ruby
          git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
          echo 'export PATH="$HOME/.rbenv/bin:$HOME/.rbenv/shims:$PATH"' >> ~/.bash_profile
          exec $SHELL
          pushd $HOME
          git clone git@github.com:sstephenson/ruby-build.git
          cd ruby-build
          ./install.sh
          ruby-build 1.8.7-p352 ~/.rbenv/versions/1.8.7-p352
          ruby-build 1.9.3-preview1 ~/.rbenv/versions/1.9.3-preview1
          rbenv rehash
          rbenv set-default 2.1.4
          ruby --version
          popd

          DEPS_DIR="${HOME}/deps"
          mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
          if [[ "${COMPILER}" == "default" ]]; then COMPILER=clang++-7; fi
          if [[ "${BOOST_VERSION}" == "default" ]]; then BOOST_VERSION=1.66.0; fi
          if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi
          ${CXX} --version
          if [[ "${BOOST_VERSION}" != "" ]]; then
            BOOST_DIR=${DEPS_DIR}/boost-${BOOST_VERSION}
            if [[ "${BOOST_VERSION}" == "trunk" ]]; then
              BOOST_URL="http://github.com/boostorg/boost.git"
              git clone --depth 1 --recursive ${BOOST_URL} ${BOOST_DIR} || exit 1
              (cd ${BOOST_DIR} && ./bootstrap.sh && ./b2 headers) || exit 1
            else
              BOOST_URL="https://dl.bintray.com/boostorg/release/${BOOST_VERSION}/source/boost_${BOOST_VERSION//\./_}.tar.gz"
              mkdir -p ${BOOST_DIR}
              { wget -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${BOOST_DIR}; } || exit 1
            fi
            # Make sure we don't conflict with the Hana shipped with Boost
            rm -r ${BOOST_DIR}/boost/{hana,hana.hpp} || exit 1

            CMAKE_OPTIONS+=" -DBOOST_ROOT=${BOOST_DIR}"
          fi

          if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
            CMAKE_URL="https://cmake.org/files/v3.10/cmake-3.10.0-Linux-x86_64.tar.gz"
            mkdir cmake && wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
            export PATH=${DEPS_DIR}/cmake/bin:${PATH}
          else
            true brew install cmake || true brew upgrade cmake
          fi

          cmake --version || true
          if [[ "${BOOST_BUILD}" == "true" ]]; then
            (cd ${BOOST_DIR}/tools/build && ./bootstrap.sh && ./b2 install --prefix=${DEPS_DIR}/b2)
            export PATH=${DEPS_DIR}/b2/bin:${PATH}
            b2 --version || true # b2 --version returns 1
          fi

          if [[ "${CXX%%+*}" == "clang" ]]; then
              if [[ "${CXX}" == "clang++-3.9" ]]; then LLVM_VERSION="3.9.1";
            elif [[ "${CXX}" == "clang++-4.0" ]]; then LLVM_VERSION="4.0.1";
            elif [[ "${CXX}" == "clang++-5.0" ]]; then LLVM_VERSION="5.0.2";
            elif [[ "${CXX}" == "clang++-6.0" ]]; then LLVM_VERSION="6.0.1";
            elif [[ "${CXX}" == "clang++-7" ]];   then LLVM_VERSION="7.0.1";
            fi

            LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
            LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
            LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"

            mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
            wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm || exit 1
            wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx || exit 1
            wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi || exit 1
            (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_DIR}/llvm/install) || exit 1
            (cd llvm/build/projects/libcxx && make install -j2) || exit 1
            (cd llvm/build/projects/libcxxabi && make install -j2) || exit 1

            export CXXFLAGS="-isystem ${DEPS_DIR}/llvm/install/include/c++/v1"
            export LDFLAGS="-L ${DEPS_DIR}/llvm/install/lib -l c++ -l c++abi"
            export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm/install/lib"
          fi

          if [[ "${DOCUMENTATION}" == "true" ]]; then
            true brew install doxygen
            doxygen --version
          fi

          if [[ "${BENCHMARKS}" == "true" ]]; then
            rvm use 2.1 --install --binary --fuzzy
            gem install ruby-progressbar tilt
          fi

          echo '==================================> BEFORE_SCRIPT'

          . $GITHUB_WORKSPACE/.github/scripts/before-script.sh

          echo '==================================> SCRIPT'

          sources=($(find include doc test example -name "*.hpp" -or -name "*.cpp"))
          LANG=POSIX grep '[^[:print:][:cntrl:]]' "${sources[@]}"; [[ $? == 1 ]] || exit 1
          LANG=POSIX grep $'\r'                   "${sources[@]}"; [[ $? == 1 ]] || exit 1
          LANG=POSIX grep $'\t'                   "${sources[@]}"; [[ $? == 1 ]] || exit 1
          LANG=POSIX grep '[[:blank:]]$'          "${sources[@]}"; [[ $? == 1 ]] || exit 1
          if [[ "${DOCUMENTATION}" == "true" ]]; then
            (cd build && ! make doc 2>&1 | grep -E "error") || exit 1

            if [[ "${TRAVIS_PULL_REQUEST}" == "false" && "${TRAVIS_BRANCH}" == "master" ]]; then
              # Suppress output to avoid leaking the token when the command fails
              git clone https://ldionne:${GITHUB_TOKEN}@github.com/boostorg/hana --depth 1 --branch=gh-pages doc/html &>/dev/null

              rm -rf doc/html/{search,*.png,*.css,*.js,*.html}
              cp -R build/doc/html/* doc/html/

              pushd doc/html
              git add --all .
              git commit --allow-empty -m "Update documentation to ${TRAVIS_COMMIT:0:7}"
              # Suppress output to avoid leaking the token
              git push origin gh-pages &>/dev/null
              popd
            fi
          fi

          if [[ "${BENCHMARKS}" == "true" ]]; then
            if [[ "${TRAVIS_PULL_REQUEST}" == "false" && "${TRAVIS_BRANCH}" == "master" ]]; then
              (cd build && make benchmarks) || exit 1
              compiler_slug=$(cd build && make travis_compiler_slug | grep 'travis_compiler_slug:' | cut -d ' ' -f 2)
              config_slug=$(cd build && make travis_config_slug | grep 'travis_config_slug:' | cut -d ' ' -f 2)

              # Suppress output to avoid leaking the token when the command fails
              git clone https://ldionne:${GITHUB_TOKEN}@github.com/boostorg/hana --depth 1 --branch=gh-pages doc/html &>/dev/null
              rm -rf doc/html/benchmarks/${config_slug}/${compiler_slug}/
              mkdir -p doc/html/benchmarks/${config_slug}/${compiler_slug}/
              for benchmark in $(ls build/benchmark/*.json | grep -v ".erb"); do
                cp ${benchmark} doc/html/benchmarks/${config_slug}/${compiler_slug}/
              done

              pushd doc/html
              git add --all .
              git commit --allow-empty -m "Update benchmarks to ${TRAVIS_COMMIT:0:7} for build type '${config_slug}' and compiler '${compiler_slug}'"
              # Suppress output to avoid leaking the token
              git push origin gh-pages &>/dev/null
              popd
            else
              export BOOST_HANA_JUST_CHECK_BENCHMARKS=true
              (cd build && make benchmarks -j2)
            fi
          fi

          if [[ "${UNIT_TESTS}" == "true" ]]; then
            (cd build && make tests examples -j2 -k) &&
            if [[ "${ENABLE_MEMCHECK}" == "true" ]]; then
              (cd build && ctest --output-on-failure -j2 -D ExperimentalMemCheck)
            else
              (cd build && ctest --output-on-failure -j2)
            fi
          fi

          if [[ "${BOOST_BUILD}" == "true" ]]; then
            # Build documentation
            (cd doc && b2) || exit 1
            if [[ ! -d doc/html ]]; then exit 1; fi

            # Build tests
            echo "using clang : : ${CXX} ;" > project-config.jam
            if [[ "${LDFLAGS}" == "" ]]; then
              (cd test && b2 toolset=clang cxxflags="-std=c++1y ${CXXFLAGS}" include="${BOOST_DIR}") || exit 1
            else
              (cd test && b2 toolset=clang cxxflags="-std=c++1y ${CXXFLAGS}" include="${BOOST_DIR}" linkflags="${LDFLAGS}") || exit 1
            fi
          fi

          fi
  osx:
    strategy:
      fail-fast: false
      matrix:
        include:
#
# Github Actions only supports certain Xcode versions
# Change (or delete) the Xcode version for this job.
# 
#           - name: "UNIT_TESTS=true BOOST_VERSION=default Job 8"
#             buildtype: "boost"
#             packages: ""
#             os: "macos-10.15"
#             cxx: "g++"
#             sources: ""
#             llvm_os: ""
#             llvm_ver: ""
#             xcode_version: "11"
#             unit_tests: "true"
#             boost_version: "default"
#             job_uuid: "fe5dbbcea5"
#
# Github Actions only supports certain Xcode versions
# Change (or delete) the Xcode version for this job.
# 
#           - name: "UNIT_TESTS=true BOOST_VERSION=default CMAKE_O Job 14"
#             buildtype: "boost"
#             packages: ""
#             os: "macos-10.15"
#             cxx: "g++"
#             sources: ""
#             llvm_os: ""
#             llvm_ver: ""
#             xcode_version: "11"
#             cmake_options: "-DBOOST_HANA_ENABLE_EXCEPTIONS=OFF"
#             unit_tests: "true"
#             boost_version: "default"
#             job_uuid: "fa35e19212"
#
# Github Actions only supports certain Xcode versions
# Change (or delete) the Xcode version for this job.
# 
#           - name: "BOOST_BUILD=true BOOST_VERSION=default Job 19"
#             buildtype: "boost"
#             packages: ""
#             os: "macos-10.15"
#             cxx: "g++"
#             sources: ""
#             llvm_os: ""
#             llvm_ver: ""
#             xcode_version: "11"
#             boost_build: "true"
#             boost_version: "default"
#             job_uuid: "b3f0c7f6bb"
          - name: "DOCUMENTATION=true BOOST_VERSION=default Job 20"
            buildtype: "boost"
            packages: ""
            os: "macos-10.15"
            cxx: "g++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            xcode_version: 11.7
            documentation: "true"
            boost_version: "default"
            job_uuid: "91032ad7bb"

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Set DEVELOPER_DIR
        if: matrix.xcode_version != ''
        run: echo "DEVELOPER_DIR=/Applications/Xcode_${{ matrix.xcode_version }}.app/Contents/Developer" >> $GITHUB_ENV
      - name: Test DEVELOPER_DIR
        run: echo $DEVELOPER_DIR

      - name: "osx"
        shell: bash
        env:
          CXX: ${{ matrix.cxx }}
          SOURCES: ${{ matrix.sources }}
          LLVM_OS: ${{ matrix.llvm_os }}
          LLVM_VER: ${{ matrix.llvm_ver }}
          PACKAGES: ${{ matrix.packages }}
          JOB_BUILDTYPE: ${{ matrix.buildtype }}
          UNIT_TESTS: ${{ matrix.unit_tests }}
          COMPILER: ${{ matrix.compiler }}
          BOOST_VERSION: ${{ matrix.boost_version }}
          ENABLE_MEMCHECK: ${{ matrix.enable_memcheck }}
          CMAKE_OPTIONS: ${{ matrix.cmake_options }}
          BOOST_BUILD: ${{ matrix.boost_build }}
          DOCUMENTATION: ${{ matrix.documentation }}
          BENCHMARKS: ${{ matrix.benchmarks }}
          TRAVIS_BRANCH: ${{ github.base_ref }}
          TRAVIS_OS_NAME: "osx"
          JOB_UUID: ${{ matrix.job_uuid }}
        run: |
          echo '==================================> SETUP'
          set -e
          sudo mv /Library/Developer/CommandLineTools /Library/Developer/CommandLineTools.bck
          echo '==================================> PACKAGES'
          echo '==================================> INSTALL AND COMPILE'
          set -e
          export TRAVIS_BUILD_DIR=$(pwd)
          export TRAVIS_BRANCH=${TRAVIS_BRANCH:-$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')}
          export VCS_COMMIT_ID=$GITHUB_SHA
          export GIT_COMMIT=$GITHUB_SHA
          export REPO_NAME=$(basename $GITHUB_REPOSITORY)
          export USER=$(whoami)
          export CC=${CC:-gcc}
          export PATH=~/.local/bin:/usr/local/bin:$PATH
          export GITHUB_EVENT_NUMBER=${{ github.event.number }}
          export TRAVIS_PULL_REQUEST=${GITHUB_EVENT_NUMBER:-false}


          if [ "$JOB_BUILDTYPE" == "boost" ]; then

          echo '==================================> INSTALL'


          # adding ruby
          git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
          echo 'export PATH="$HOME/.rbenv/bin:$HOME/.rbenv/shims:$PATH"' >> ~/.bash_profile
          exec $SHELL
          pushd $HOME
          git clone git@github.com:sstephenson/ruby-build.git
          cd ruby-build
          ./install.sh
          ruby-build 1.8.7-p352 ~/.rbenv/versions/1.8.7-p352
          ruby-build 1.9.3-preview1 ~/.rbenv/versions/1.9.3-preview1
          rbenv rehash
          rbenv set-default 2.1.4
          ruby --version
          popd

          DEPS_DIR="${HOME}/deps"
          mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
          if [[ "${COMPILER}" == "default" ]]; then COMPILER=clang++-7; fi
          if [[ "${BOOST_VERSION}" == "default" ]]; then BOOST_VERSION=1.66.0; fi
          if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi
          ${CXX} --version
          if [[ "${BOOST_VERSION}" != "" ]]; then
            BOOST_DIR=${DEPS_DIR}/boost-${BOOST_VERSION}
            if [[ "${BOOST_VERSION}" == "trunk" ]]; then
              BOOST_URL="http://github.com/boostorg/boost.git"
              git clone --depth 1 --recursive ${BOOST_URL} ${BOOST_DIR} || exit 1
              (cd ${BOOST_DIR} && ./bootstrap.sh && ./b2 headers) || exit 1
            else
              BOOST_URL="https://dl.bintray.com/boostorg/release/${BOOST_VERSION}/source/boost_${BOOST_VERSION//\./_}.tar.gz"
              mkdir -p ${BOOST_DIR}
              { wget -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${BOOST_DIR}; } || exit 1
            fi
            # Make sure we don't conflict with the Hana shipped with Boost
            rm -r ${BOOST_DIR}/boost/{hana,hana.hpp} || exit 1

            CMAKE_OPTIONS+=" -DBOOST_ROOT=${BOOST_DIR}"
          fi

          if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
            CMAKE_URL="https://cmake.org/files/v3.10/cmake-3.10.0-Linux-x86_64.tar.gz"
            mkdir cmake && wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
            export PATH=${DEPS_DIR}/cmake/bin:${PATH}
          else
            true brew install cmake || true brew upgrade cmake
          fi

          cmake --version || true
          if [[ "${BOOST_BUILD}" == "true" ]]; then
            (cd ${BOOST_DIR}/tools/build && ./bootstrap.sh && ./b2 install --prefix=${DEPS_DIR}/b2)
            export PATH=${DEPS_DIR}/b2/bin:${PATH}
            b2 --version || true # b2 --version returns 1
          fi

          if [[ "${CXX%%+*}" == "clang" ]]; then
              if [[ "${CXX}" == "clang++-3.9" ]]; then LLVM_VERSION="3.9.1";
            elif [[ "${CXX}" == "clang++-4.0" ]]; then LLVM_VERSION="4.0.1";
            elif [[ "${CXX}" == "clang++-5.0" ]]; then LLVM_VERSION="5.0.2";
            elif [[ "${CXX}" == "clang++-6.0" ]]; then LLVM_VERSION="6.0.1";
            elif [[ "${CXX}" == "clang++-7" ]];   then LLVM_VERSION="7.0.1";
            fi

            LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
            LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
            LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"

            mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
            wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm || exit 1
            wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx || exit 1
            wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi || exit 1
            (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_DIR}/llvm/install) || exit 1
            (cd llvm/build/projects/libcxx && make install -j2) || exit 1
            (cd llvm/build/projects/libcxxabi && make install -j2) || exit 1

            export CXXFLAGS="-isystem ${DEPS_DIR}/llvm/install/include/c++/v1"
            export LDFLAGS="-L ${DEPS_DIR}/llvm/install/lib -l c++ -l c++abi"
            export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm/install/lib"
          fi

          if [[ "${DOCUMENTATION}" == "true" ]]; then
            true brew install doxygen
            doxygen --version
          fi

          if [[ "${BENCHMARKS}" == "true" ]]; then
            rvm use 2.1 --install --binary --fuzzy
            gem install ruby-progressbar tilt
          fi

          echo '==================================> BEFORE_SCRIPT'

          . $GITHUB_WORKSPACE/.github/scripts/before-script.sh

          echo '==================================> SCRIPT'

          sources=($(find include doc test example -name "*.hpp" -or -name "*.cpp"))
          LANG=POSIX grep '[^[:print:][:cntrl:]]' "${sources[@]}"; [[ $? == 1 ]] || exit 1
          LANG=POSIX grep $'\r'                   "${sources[@]}"; [[ $? == 1 ]] || exit 1
          LANG=POSIX grep $'\t'                   "${sources[@]}"; [[ $? == 1 ]] || exit 1
          LANG=POSIX grep '[[:blank:]]$'          "${sources[@]}"; [[ $? == 1 ]] || exit 1
          if [[ "${DOCUMENTATION}" == "true" ]]; then
            (cd build && ! make doc 2>&1 | grep -E "error") || exit 1

            if [[ "${TRAVIS_PULL_REQUEST}" == "false" && "${TRAVIS_BRANCH}" == "master" ]]; then
              # Suppress output to avoid leaking the token when the command fails
              git clone https://ldionne:${GITHUB_TOKEN}@github.com/boostorg/hana --depth 1 --branch=gh-pages doc/html &>/dev/null

              rm -rf doc/html/{search,*.png,*.css,*.js,*.html}
              cp -R build/doc/html/* doc/html/

              pushd doc/html
              git add --all .
              git commit --allow-empty -m "Update documentation to ${TRAVIS_COMMIT:0:7}"
              # Suppress output to avoid leaking the token
              git push origin gh-pages &>/dev/null
              popd
            fi
          fi

          if [[ "${BENCHMARKS}" == "true" ]]; then
            if [[ "${TRAVIS_PULL_REQUEST}" == "false" && "${TRAVIS_BRANCH}" == "master" ]]; then
              (cd build && make benchmarks) || exit 1
              compiler_slug=$(cd build && make travis_compiler_slug | grep 'travis_compiler_slug:' | cut -d ' ' -f 2)
              config_slug=$(cd build && make travis_config_slug | grep 'travis_config_slug:' | cut -d ' ' -f 2)

              # Suppress output to avoid leaking the token when the command fails
              git clone https://ldionne:${GITHUB_TOKEN}@github.com/boostorg/hana --depth 1 --branch=gh-pages doc/html &>/dev/null
              rm -rf doc/html/benchmarks/${config_slug}/${compiler_slug}/
              mkdir -p doc/html/benchmarks/${config_slug}/${compiler_slug}/
              for benchmark in $(ls build/benchmark/*.json | grep -v ".erb"); do
                cp ${benchmark} doc/html/benchmarks/${config_slug}/${compiler_slug}/
              done

              pushd doc/html
              git add --all .
              git commit --allow-empty -m "Update benchmarks to ${TRAVIS_COMMIT:0:7} for build type '${config_slug}' and compiler '${compiler_slug}'"
              # Suppress output to avoid leaking the token
              git push origin gh-pages &>/dev/null
              popd
            else
              export BOOST_HANA_JUST_CHECK_BENCHMARKS=true
              (cd build && make benchmarks -j2)
            fi
          fi

          if [[ "${UNIT_TESTS}" == "true" ]]; then
            (cd build && make tests examples -j2 -k) &&
            if [[ "${ENABLE_MEMCHECK}" == "true" ]]; then
              (cd build && ctest --output-on-failure -j2 -D ExperimentalMemCheck)
            else
              (cd build && ctest --output-on-failure -j2)
            fi
          fi

          if [[ "${BOOST_BUILD}" == "true" ]]; then
            # Build documentation
            (cd doc && b2) || exit 1
            if [[ ! -d doc/html ]]; then exit 1; fi

            # Build tests
            echo "using clang : : ${CXX} ;" > project-config.jam
            if [[ "${LDFLAGS}" == "" ]]; then
              (cd test && b2 toolset=clang cxxflags="-std=c++1y ${CXXFLAGS}" include="${BOOST_DIR}") || exit 1
            else
              (cd test && b2 toolset=clang cxxflags="-std=c++1y ${CXXFLAGS}" include="${BOOST_DIR}" linkflags="${LDFLAGS}") || exit 1
            fi
          fi

          fi
